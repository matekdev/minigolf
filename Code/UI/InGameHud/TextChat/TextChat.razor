@namespace Minigolf.UI
@inherits PanelComponent

@implements IGameEventHandler<ChatMessageEvent>
@implements IGameEventHandler<InfoChatMessageEvent>
@implements IGameEventHandler<ClientConnectedEvent>
@implements IGameEventHandler<ClientDisconnectedEvent>

<root>
	<div class="canvas" @ref=Canvas></div>
	<TextEntry @ref=Input onsubmit=@Submit onblur=@Close />
</root>

@code {
	private const int MaxItems = 100;
	private const float MessageLifetime = 10f;

	private Panel Canvas { get; set; }
	private TextEntry Input { get; set; }

	private readonly Queue<TextChatEntry> _entries = new();

	protected override void OnTreeBuilt()
	{
		Canvas.PreferScrollToBottom = true;
		Input.AcceptsFocus = true;
		Input.AllowEmojiReplace = true;
	}

	protected override void OnUpdate()
	{
		if ( Sandbox.Input.Pressed( InputAction.Chat ) )
			Open();
	}

	private void AddEntry( TextChatEntry entry )
	{
		if (!Canvas.IsValid())
			return;

		Canvas.AddChild( entry );
		Canvas.TryScrollToBottom();

		entry.BindClass( "stale", () => entry.Lifetime > MessageLifetime );

		_entries.Enqueue( entry );
		if ( _entries.Count > MaxItems )
			_entries.Dequeue().Delete();
	}

	private void Open()
	{
		AddClass( "open" );
		Input.Focus();
		Canvas.TryScrollToBottom();
	}

	private void Close()
	{
		RemoveClass( "open" );
		Input.Blur();
		Input.Text = string.Empty;
		Input.Label.SetCaretPosition( 0 );
	}

	private void Submit()
	{
		var message = Input.Text.Trim();
		Input.Text = "";

		Close();

		if ( string.IsNullOrWhiteSpace( message ) || message.Contains( '\n' ) || message.Contains( '\r' ) )
			return;

		Message(message);
	}

	[Broadcast]
	public static void Message(string message)
	{
		Game.ActiveScene.Dispatch(new ChatMessageEvent(Rpc.Caller.DisplayName, Rpc.Caller.SteamId, message));
	}

	[Broadcast]
	public static void InfoMessage(string message)
	{
		Game.ActiveScene.Dispatch(new InfoChatMessageEvent(message));
	}

	void IGameEventHandler<ChatMessageEvent>.OnGameEvent( ChatMessageEvent eventArgs )
    {
		AddEntry(new TextChatEntry(){ Name = eventArgs.DisplayName, SteamId = eventArgs.SteamId, Message = eventArgs.Message });
	}

	void IGameEventHandler<InfoChatMessageEvent>.OnGameEvent( InfoChatMessageEvent eventArgs )
    {
		AddEntry(new TextChatEntry(){ Message = eventArgs.Message });
	}

	void IGameEventHandler<ClientConnectedEvent>.OnGameEvent( ClientConnectedEvent eventArgs )
    {
		var connection = Connection.Find(eventArgs.ConnectionId);
		AddEntry(new TextChatEntry(){ Message = $"{connection.DisplayName} has connected" });
	}

	void IGameEventHandler<ClientDisconnectedEvent>.OnGameEvent( ClientDisconnectedEvent eventArgs )
    {
		var connection = Connection.Find(eventArgs.ConnectionId);
		AddEntry(new TextChatEntry(){ Message = $"{connection.DisplayName} has disconnected" });
	}

	[ConCmd("mg_chat_info")]
	private static void DebugChatInfo(string message = "This is a test message")
	{
		Game.ActiveScene.Dispatch(new InfoChatMessageEvent(message));
	}
}
